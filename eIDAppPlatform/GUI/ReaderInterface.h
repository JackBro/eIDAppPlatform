#pragma once

#using <..\\debug\\FunctionModule.dll>

using namespace System;
using namespace System::Windows::Forms;
using namespace System::Threading;
using namespace FunctionModule;

public ref class ReaderInterface{

public:

	static const int MAX_READER = 0x40;
	static const int LINE1 = 0x01;
	static const int LINE2 = 0x02;
	static const int LINE_INDEX_IN_ARRAY = 0x03;
	static const int DISDATA_LENGTH_IN_ARRAY = 0x04;

	static const Int64 OPERATION_SUCCESS = 0x9000;
	static const Int64 FETCH_NEXT_DATA = 0x61;
	

	static array<byte>^ byGetRandom = gcnew array<byte>{0x00, (byte)0x84, 0x00, 0x00, 0x08};

	static array<byte>^ bySelecteIDApplet = gcnew array<byte>{0x00, (byte)0xA4, 0x00, 0x00, 0x08, (byte)0xA0, 
		0x00, 0x00, 0x00, 0x03, 0x45, 0x49, 0x44};

	static array<byte>^ byFetchNextData = gcnew array<byte>{0x00, (byte)0xc0, 0x00, 0x00, 0x00};

	static array<byte>^ byDisNothingFirstLine = gcnew array<byte>{(byte)0x80, (byte)0xBF, 0x01, 0x01, 0x09, 
		(byte)0x20, (byte)0x20, (byte)0x20, (byte)0x20, (byte)0x20, (byte)0x20, (byte)0x20, (byte)0x20, (byte)0x20};

	static array<byte>^ byDisNothingSecondLine = gcnew array<byte>{(byte)0x80, (byte)0xBF, 0x01, 0x02, 0x09, 
		(byte)0x20, (byte)0x20, (byte)0x20, (byte)0x20, (byte)0x20, (byte)0x20, (byte)0x20, (byte)0x20, (byte)0x20};

	static array<byte>^ bySetDisplayData = gcnew array<byte>{(byte)0x80, (byte)0xBF, 0x01, 0x00, 0x00};

	static array<byte>^ byDisplayOnCard = gcnew array<byte>{(byte)0x80, (byte)0xBF, 0x01, 0x03, 0x00};
	static array<byte>^ bySelectBinFile = gcnew array<byte>{0x00, (byte)0xa4, 0x00, 0x00, 0x02, 0x55, 0x55};
	static array<byte>^ byUpdateBinFile = gcnew array<byte>{0x00, (byte)0xd6, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00};
	static array<byte>^ byReadBinFile = gcnew array<byte>{0x00, (byte)0xb0, 0x00, 0x00, 0x04};
	static array<byte>^ byEnableCardButtonPushed = gcnew array<byte>{(byte)0x80, (byte)0xbf, 0x06, 0x00, 0x00};

	static array<byte>^ byRSAPrivateKeySign  = gcnew array<byte>{(byte)0x80, (byte)0x48, (byte)0x40, (byte)0x00, (byte)0x87, 
		(byte)0xc2, (byte)0x02, (byte)0x10, (byte)0x12, (byte)0xc1, (byte)0x81, (byte)0x80, (byte)0x00, (byte)0x01, (byte)0xff, 
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, 
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, 
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, 
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, 
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, 
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, 
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, 
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, 
		(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0x00, 
		(byte)0x30, (byte)0x21, (byte)0x30, (byte)0x09, (byte)0x06, (byte)0x05, (byte)0x2b, (byte)0x0e, (byte)0x03, (byte)0x02, 
		(byte)0x1a, (byte)0x05, (byte)0x00, (byte)0x04, (byte)0x14, (byte)0x5d, (byte)0x21, (byte)0x1b, (byte)0xad, (byte)0x8f, 
		(byte)0x4e, (byte)0xe7, (byte)0x0e, (byte)0x16, (byte)0xc7, (byte)0xd3, (byte)0x43, (byte)0xa8, (byte)0x38, (byte)0xfc, 
		(byte)0x34, (byte)0x4a, (byte)0x1e, (byte)0xd9, (byte)0x61};

	static array<byte>^ byRSAPublicKeyVerify  = gcnew array<byte>{(byte)0x80, (byte)0x46, (byte)0xc0, (byte)0x00, (byte)0x87, 
		(byte)0xc0, (byte)0x02, (byte)0x10, (byte)0x13, (byte)0xc1, (byte)0x81, (byte)0x80, (byte)0x59, (byte)0x70, (byte)0x02, 
		(byte)0xe8, (byte)0x62, (byte)0xae, (byte)0xbd, (byte)0x55, (byte)0x51, (byte)0x3d, (byte)0x5a, (byte)0x58, (byte)0xd1, 
		(byte)0x95, (byte)0x04, (byte)0xc4, (byte)0x04, (byte)0x43, (byte)0x4f, (byte)0xaa, (byte)0x7b, (byte)0x85, (byte)0xce, 
		(byte)0xf3, (byte)0xae, (byte)0x0d, (byte)0x9e, (byte)0x5a, (byte)0x53, (byte)0x27, (byte)0x04, (byte)0x86, (byte)0x78, 
		(byte)0xfa, (byte)0xdd, (byte)0x68, (byte)0xa5, (byte)0x2e, (byte)0xb7, (byte)0x84, (byte)0x07, (byte)0x01, (byte)0xd0, 
		(byte)0x37, (byte)0x68, (byte)0xa0, (byte)0x11, (byte)0xfe, (byte)0x24, (byte)0x32, (byte)0xbe, (byte)0x24, (byte)0x0a, 
		(byte)0x49, (byte)0x5d, (byte)0x42, (byte)0x29, (byte)0xac, (byte)0xf4, (byte)0xf0, (byte)0xc0, (byte)0x99, (byte)0xbb, 
		(byte)0x8c, (byte)0x63, (byte)0xd4, (byte)0xfb, (byte)0xe1, (byte)0x67, (byte)0x66, (byte)0x11, (byte)0x6b, (byte)0xf9, 
		(byte)0xc1, (byte)0x5a, (byte)0xf6, (byte)0x30, (byte)0x42, (byte)0x71, (byte)0x82, (byte)0x65, (byte)0x98, (byte)0x94, 
		(byte)0x3e, (byte)0xc8, (byte)0x43, (byte)0x95, (byte)0x20, (byte)0x4c, (byte)0x7b, (byte)0x92, (byte)0x32, (byte)0x73, 
		(byte)0x24, (byte)0x5f, (byte)0x20, (byte)0x29, (byte)0xde, (byte)0x88, (byte)0x32, (byte)0xaa, (byte)0x96, (byte)0x55, 
		(byte)0x28, (byte)0xee, (byte)0xa2, (byte)0xf9, (byte)0x1d, (byte)0xd7, (byte)0xb7, (byte)0xce, (byte)0xbb, (byte)0x0d, 
		(byte)0x5d, (byte)0xce, (byte)0xd9, (byte)0x95, (byte)0x9d, (byte)0xae, (byte)0x8a, (byte)0x48, (byte)0x54, (byte)0x69, 
		(byte)0xdc, (byte)0xef, (byte)0x90, (byte)0x27, (byte)0x29};

	static String^ OP_FAILED = gcnew String("Operation Failed£¡");
	static String^ DIS_NOTHING_ON_LINE = gcnew String("DIS_NOTHING");
	static String^ DIS_NOCHANGE = gcnew String("DIS_NOCHANGE");

	String^ strResponseSW;
	String^ strResponseData;

	array<String^>^ strReaderList;

	int nReaderCounter;

	DWORD dwResponseLen;

	ReaderDriver^ rd;
	


public:
	ReaderInterface();
	long GetReaderList();
	long ReaderControl(String^ readername, bool status);
	long DateCommunication(array<byte>^ cmd);

	long SelecteIDApplet();
	long GetRandom();
	long DisPlayOnCard(String^ line1, String^ line2);
	long GetBanlance();
	long UpdateBinFile(String^ data);
	long WaitCardButtonPushed();
	long eIDAuth();

	String^ ErrorDescription(long ret);

private:
	long FetchNextData(byte length);
	void GetResponseData(array<byte>^ response, int len);
	array<byte>^ GetDisDataArray(String^ data);
	
};